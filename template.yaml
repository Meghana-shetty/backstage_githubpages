apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: Github-pages-deploy-from-github
  title: Deploy to Github pages from GitHub Repo
  description: Create and deploy a Docker container from a GitHub repository URL.
spec:
  owner: user:guest
  type: service

  
  parameters:
    - title: GitHub Repository URL
      required: 
        - Github_URL
        #- Dockerfile
        #- Port
      properties:
        Github_URL:
          title: Enter you Github URL
          type: string
          description: Enter the github URL where your code exists
          ui:autofocus: true

    - title: Select where you want to deploy your code
      required:
        - stack
      properties:
        stack:
          title: Select from below list
          type: string
          enum:
            - Docker
            - Github pages
            - Baremetal
            - Kubernetes
  
    - title: Enter below details
      dependencies:
        stack:
          oneOf:
            - properties:
                stack:
                  const: Docker
                extraFields:          # üëà wrap everything else inside a schema key
                  title: Enter the details
                  type: object
                  properties:
                    Dockerfile:
                      title: Enter the Path of Dockerfile
                      type: string
                      description: Enter the Dockerfile path (e.g. build/Dockerfile or enter Dockerfile if it is in root) 
                      default: "Dockerfile" 
                    Port:
                      title: Enter the Port number
                      type: integer
                      minimum: 1
                      maximum: 65535
                      description: Enter the Port number of your application (e.g. 80/3000/5000)
  
            - properties:
                stack:
                  const: Github pages
                extraFields:
                  type: object
                  properties: 
                    Github:
                      title: Enter the Path of Github Url
                      type: string
                      description: Enter the Github URL 
                      
                      
                    GithubToken:
                      title: Enter the Github Token
                      type: string
                      description: Enter the token
                       
  
            - properties:
                stack:
                  const: Baremetal
                extraFields:
                  type: object
                  properties: {}
  
            - properties:
                stack:
                  const: Kubernetes
                extraFields:
                  type: object
                  properties: {}
          
  steps:
    # - id: fetch-template
    #   name: Fetch template files
    #   action: fetch:plain
    #   input:
    #     url: ${{ parameters.Github_URL }}
    #     targetPath: .

    - id: fetch
      name: Fetch GitHub Repo
      action: fetch:plain
      input:
        url: ${{ parameters.Github_URL }}
        targetPath: ./site  # fetch code into ./site folder

    - id: build
      name: Build Project
      action: shell:run
      input:
        command: bash
        args:
          - -c
          - |
            # Node.js
            PACKAGE_JSON=$(find . -name package.json -print -quit)
            if [ -n "$PACKAGE_JSON" ]; then
              cd $(dirname "$PACKAGE_JSON")
              npm install
              npm run build
              # Normalize output to ./dist
              if [ -d build ]; then mv build ../dist; elif [ -d dist ]; then mv dist ../dist; fi
            elif [ -f "index.html" ]; then
              # plain static site, just copy to ./dist
              mkdir -p ./dist
              cp -r ./* ./dist
            else
              echo "‚ö†Ô∏è Unknown project type; no build executed"
            fi
        cwd: ./site

    # - id: build
    #   name: Build Project
    #   action: scaffolder:execute-shell-command
    #   input:
    #     workingDirectory: ./site
    #     shell: bash
    #     script: |
    #       # Node.js
    #       PACKAGE_JSON=$(find . -name package.json -print -quit)
    #       if [ -n "$PACKAGE_JSON" ]; then
    #         cd $(dirname "$PACKAGE_JSON")
    #         npm install
    #         npm run build
    #         # Normalize output to ./dist
    #         if [ -d build ]; then mv build ../dist; elif [ -d dist ]; then mv dist ../dist; fi
    #       elif [ -f "index.html" ]; then
    #         # plain static site, just copy to ./dist
    #         mkdir -p ./dist
    #         cp -r ./* ./dist
    #       else
    #         echo "‚ö†Ô∏è Unknown project type; no build executed"

    - id: publish
      name: Publish to GitHub Pages
      action: publish:github
      input:
        repoUrl: ${{ parameters.extraFields.Github }}  # GitHub repo URL
        defaultBranch: gh-pages
        sourcePath: ./site/dist  # folder containing final static site
        protectDefaultBranch: false

    - id: enable-pages
      name: Enable GitHub Pages
      if: ${{ parameters.stack == 'Github pages' }}
      action: github:pages:enable
      input:
        repoUrl: ${{ parameters.extraFields.Github }}
        buildType: workflow
        sourceBranch: gh-pages
        sourcePath: /
        token: ${{ parameters.extraFields.GithubToken }}



    # - id: github-pages
    #   name: Enable GitHub Pages
    #   if: ${{ parameters.stack == 'Github pages' }}
    #   action: github:pages:enable
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }} # github.com?repo=Cafe-static-last&owner=Meghana-shetty
    #     buildType: workflow
    #     sourceBranch: main
    #     sourcePath: /
    #     token: ${{ parameters.extraFields.GithubToken }}


    ##########################Adding for Github Pages##########################

    # - id: fetch
    #   name: Fetch Template
    #   action: fetch:template
    #   input:
    #     url: ./template-content
    #     targetPath: ./site

    # - id: build
    #   name: Build Static Site
    #   action: scaffolder:execute-shell-command #execute:template
    #   input:
    #     #command: npm install && npm run build
    #       shell: bash
    #       script: |
    #       # Search for Node.js project
    #         PACKAGE_JSON_PATH=$(find . -name package.json -print -quit)
    #         if [ -n "$PACKAGE_JSON_PATH" ]; then
    #           echo "üì¶ Node.js project detected at $PACKAGE_JSON_PATH"
    #           cd $(dirname "$PACKAGE_JSON_PATH")
    #           npm install
    #           npm run build
            
    #         # Search for Maven project
    #         elif MAVEN_POM_PATH=$(find . -name pom.xml -print -quit); [ -n "$MAVEN_POM_PATH" ]; then
    #           echo "‚òï Java Maven project detected at $MAVEN_POM_PATH"
    #           cd $(dirname "$MAVEN_POM_PATH")
    #           mvn package
            
    #         # Search for Gradle project
    #         elif GRADLE_PATH=$(find . \( -name build.gradle -o -name gradlew \) -print -quit); [ -n "$GRADLE_PATH" ]; then
    #           echo "‚òï Java Gradle project detected at $GRADLE_PATH"
    #           cd $(dirname "$GRADLE_PATH")
    #           ./gradlew build
            
    #         # Search for Python project
    #         elif PYTHON_REQ_PATH=$(find . -name requirements.txt -print -quit); [ -n "$PYTHON_REQ_PATH" ]; then
    #           echo "üêç Python project detected at $PYTHON_REQ_PATH"
    #           cd $(dirname "$PYTHON_REQ_PATH")
    #           pip install -r requirements.txt
    #           python manage.py collectstatic || echo "No static files to collect"
            
    #         # Search for plain static site
    #         elif HTML_PATH=$(find . -name index.html -print -quit); [ -n "$HTML_PATH" ]; then
    #           echo "üåê Plain static site detected at $HTML_PATH (no build needed)"
            
    #         else
    #           echo "‚ö†Ô∏è Unknown project type. No build executed."
    #         fi

    #       workingDirectory: .

    # - id: publish
    #   name: Publish to GitHub
    #   action: publish:github
    #   input:
    #     repoUrl: ${{ parameters.extraFields.Github }}
    #     defaultBranch: gh-pages
    #     sourcePath: ./dist
    #     protectDefaultBranch: false


  # output:
  #   links:
  #     - title: Repository
  #       url: ${{ steps.publish.output.remoteUrl }}
  #     - title: Live GitHub Pages Site
  #       url: ${{ steps.github-pages.output.pageUrl }}


    
################################################################################################################################
    # - id: build_docker
    #   name: Build Docker Image
    #   if: ${{ parameters.stack == 'Docker' }}
    #   action: shell:run
    #   input:
    #     cwd: ${{ steps.clone.output.path }}
    #     command: docker 
    #     args: ["build", "-f", "${{ parameters.extraFields.Dockerfile }}", "-t", "my-image:latest", "."]


    # - id: cleanup
    #   name: Remove old container if exists
    #   if: ${{ parameters.stack == 'Docker' }}
    #   action: shell:run
    #   input:
    #     command: docker
    #     args: ["rm", "-f", "Cafe-container"]
                

    # - id: deploy_docker
    #   name: Deploy Docker Container
    #   if: ${{ parameters.stack == 'Docker' }}
    #   action: shell:run
    #   input:
    #     cwd: ${{ steps.clone.output.path }}
    #     command: docker
    #     args: ["run", "--name", "Cafe-container", "-it", "-d", "-p", "89:${{ parameters.extraFields.Port }}", "my-image:latest"]

    # - id: run-echo
    #   name: Echo Test
    #   action: shell:run
    #   input:
    #     command: echo
    #     args: ["Hello Backstage!"]

  # output:
  #   links:
  #     - title: "Open Website"
  #       #url: "http://localhost:89"
  #       icon: "website"
